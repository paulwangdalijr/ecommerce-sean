{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/about/about.component.css","webpack:///./src/app/components/about/about.component.html","webpack:///./src/app/components/about/about.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/signup/signup.component.css","webpack:///./src/app/components/signup/signup.component.html","webpack:///./src/app/components/signup/signup.component.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["var map = {\n\t\"./product.module/product.module\": [\n\t\t\"./src/app/product.module/product.module.ts\",\n\t\t\"product-module-product-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar module = __webpack_require__(ids[0]);\n\t\treturn module;\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","import { NgModule }             from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { HomeComponent } from './components/home/home.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { SignupComponent } from './components/signup/signup.component';\n//test\nconst routes: Routes = [\n  // { path: '', \n  // \tcomponent: HomeComponent, \n  // \tchildren: [\n  // \t\t{ path: '', loadChildren: './product/product.module#ProductModule' }\n  // \t]\n  // },\n  // { path: '', component: HomeComponent },\n\n  { path: '', loadChildren: './product.module/product.module#ProductModule' },\n  { path: 'about', component: AboutComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'signup', component: SignupComponent },\n  { path: '**', loadChildren: './product.module/product.module#ProductModule' }\n  \n  // { path: 'products', loadChildren: './products/products.module#ProductsModule' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n\n})\n\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<app-navbar></app-navbar>\\n<router-outlet></router-outlet>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './/app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { SignupComponent } from './components/signup/signup.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    HomeComponent,\n    AboutComponent,\n    LoginComponent,\n    SignupComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<p>\\n  about works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit() {\n  \t\n  }\n\n}\n","module.exports = \"\"","module.exports = \"\\n\\n  <!-- Custom Success/Error Message -->\\n  <div class=\\\"show-hide-message\\\">\\n    <div [ngClass]=\\\"messageClass\\\">\\n      {{ message }}\\n    </div>\\n  </div>\\n\\n<div class=\\\"row\\\">\\n\\n  <div class=\\\"col-3\\\"></div>\\n  <div class=\\\"col-6\\\">\\n    \\n  <h2 class=\\\"page-header\\\">Login</h2>\\n  <!-- Login Form -->\\n  <form [formGroup]=\\\"form\\\"  (submit)=\\\"onLoginSubmit()\\\">\\n\\n    <!-- email Field -->\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">email</label>\\n      <div [ngClass]=\\\"{'has-error': form.controls.email.errors && form.controls.email.dirty, 'has-success': form.controls.email.valid && form.controls.email.dirty }\\\">\\n        <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"email\\\" formControlName=\\\"email\\\" />\\n        <!-- Validation -->\\n        <ul class=\\\"help-block\\\">\\n          <li *ngIf=\\\"form.controls.email.errors?.required && form.controls.email.dirty\\\">This field is required.</li>\\n        </ul>\\n      </div>\\n    </div>\\n\\n    <!-- Password Field  -->\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"password\\\">Password</label>\\n      <div [ngClass]=\\\"{'has-error': form.controls.password.errors && form.controls.password.dirty, 'has-success': form.controls.password.valid && form.controls.password.dirty }\\\">\\n        <input class=\\\"form-control\\\" type=\\\"password\\\" name=\\\"password\\\" formControlName=\\\"password\\\" />\\n        <!-- Validation -->\\n        <ul class=\\\"help-block\\\">\\n          <li *ngIf=\\\"form.controls.password.errors?.required && form.controls.password.dirty\\\">This field is required.</li>\\n        </ul>\\n      </div>\\n    </div>\\n    <!-- Submit Button -->\\n    <input [disabled]=\\\"!form.valid || processing\\\" class=\\\"btn btn-primary\\\" type=\\\"submit\\\" value=\\\"Login\\\" />\\n  </form>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService\n\n    ) { }\n\n  ngOnInit() {\n  \tthis.createForm();\n  }\n\n  createForm(){\n    this.form = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n}\n","module.exports = \".account-button{\\r\\n\\tfont-size: 30px;\\r\\n\\tmargin-right: 15px;\\r\\n}\\r\\n.account-button i{\\r\\n\\tfont-size: 30px;\\r\\n\\tmargin-right: 15px;\\r\\n}\\r\\n.account-button:hover{\\r\\n\\tcursor: pointer;\\r\\n}\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Shopping!</a>\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarColor02\\\" aria-controls=\\\"navbarColor02\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarColor02\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\n      <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"\\\">Home <span class=\\\"sr-only\\\">(current)</span></a>\\n      </li>      \\n      <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"about\\\">About</a>\\n      </li>\\n    </ul>\\n    <form class=\\\"form-inline my-2 my-lg-0\\\">\\n      <div class=\\\"btn-group show\\\" role=\\\"group\\\">\\n        <div class=\\\"account-button dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\n           <i class=\\\"fas fa-user\\\"></i>\\n        </div>\\n        <div class=\\\"dropdown-menu\\\" x-placement=\\\"bottom-start\\\" style=\\\"position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(0px, 48px, 0px);\\\">\\n          <a class=\\\"dropdown-item\\\" routerLink=\\\"login\\\">Login</a>\\n          <a class=\\\"dropdown-item\\\" routerLink=\\\"signup\\\">Sign Up</a>\\n        </div>\\n      </div>\\n      <input class=\\\"form-control mr-sm-2\\\" type=\\\"text\\\" placeholder=\\\"Search\\\">\\n      <!-- <button class=\\\"btn btn-secondary my-2 my-sm-0\\\" type=\\\"submit\\\">Search</button> -->\\n    </form>\\n  </div>\\n</nav>\\n\\n<ol class=\\\"breadcrumb\\\">\\n  <li class=\\\"breadcrumb-item\\\"><a href=\\\"#\\\">Home</a></li>\\n  <li class=\\\"breadcrumb-item\\\"><a href=\\\"#\\\">Library</a></li>\\n  <li class=\\\"breadcrumb-item active\\\">Data</li>\\n</ol>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"\\n\\n<div class='show-hide-message'>\\n  <div [ngClass]='messageClass'>\\n    {{message}}\\n  </div>\\n</div>\\n\\n<!-- Registration Form -->\\n<div class=\\\"row\\\">\\n\\t<div class=\\\"col-3\\\"></div>\\n\\t<div class=\\\"col-6\\\">\\n\\t\\t<h1 class=\\\"page-header\\\">Signup</h1>\\n\\t\\t<form id=\\\"registerForm\\\" [formGroup]=\\\"form\\\" (submit)=\\\"onRegisterSubmit()\\\">  \\n\\t\\t  \\n\\t\\t  <!-- Email Input -->\\n\\t\\t  <div class=\\\"form-group\\\">\\n\\t\\t    <label for=\\\"email\\\">Email</label>\\n\\t\\t    <!-- <div [ngClass]=\\\"{'has-danger': form.controls.email.dirty && (form.controls.email.errors || !emailValid ), 'has-success': !form.controls.email.errors && emailValid}\\\"> -->\\n\\t\\t      <input type=\\\"text\\\" name=\\\"email\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\" placeholder=\\\"*Email\\\" formControlName=\\\"email\\\" (blur)=\\\"checkEmail()\\\" \\n\\t\\t      [ngClass]=\\\"{'is-invalid': form.controls.email.dirty && (form.controls.email.errors || !emailValid ), 'is-valid': !form.controls.email.errors && emailValid}\\\"\\n\\t\\t      />\\n\\t\\t      <!-- Validation -->\\n\\t\\t      \\n\\t\\t      <ul class=\\\"help-block\\\"\\n\\t\\t      [ngClass]=\\\"{'invalid-feedback': form.controls.email.dirty && (form.controls.email.errors || !emailValid ), 'valid-feedback': !form.controls.email.errors && emailValid}\\\"\\n\\t\\t      >\\n\\t\\t        <li *ngIf=\\\"form.controls.email.errors?.required && form.controls.email.dirty\\\">This field is required</li>\\n\\t\\t        <li *ngIf=\\\"(form.controls.email.errors?.minlength && form.controls.email.dirty || form.controls.email.errors?.maxlength && form.controls.email.dirty ) && form.controls.email.dirty\\\">Minimum characters: 5, Maximum characters: 30</li>\\n\\t\\t        <li *ngIf=\\\"form.controls.email.errors?.validateEmail && form.controls.email.dirty\\\">This must be a valid e-mail</li>\\n\\t\\t        <li *ngIf=\\\"emailMessage\\\">{{ emailMessage }}</li>\\n\\t\\t      </ul>\\n\\t\\t    <!-- </div> -->\\n\\t\\t  </div>\\n\\n\\t\\t  <!-- Password Input -->\\n\\t\\t  <div class=\\\"form-group\\\">\\n\\t\\t    <label for=\\\"password\\\">Password</label>\\n\\t\\t    <!-- <div [ngClass]=\\\"{'has-danger': (form.controls.password.errors && form.controls.password.dirty), 'has-success': !form.controls.password.errors}\\\"> -->\\n\\t\\t      <input type=\\\"password\\\" name=\\\"password\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\" placeholder=\\\"*Password\\\" formControlName=\\\"password\\\" \\n\\t\\t      [ngClass]=\\\"{'is-invalid': (form.controls.password.errors && form.controls.password.dirty), 'is-valid': !form.controls.password.errors}\\\"\\n\\t\\t      />\\n\\t\\t      <!-- Validation -->\\n\\t\\t      <ul class=\\\"help-block\\\"\\n\\t\\t      [ngClass]=\\\"{'invalid-feedback': (form.controls.password.errors && form.controls.password.dirty), 'valid-feedback': !form.controls.password.errors}\\\"\\n\\t\\t      >\\n\\t\\t        <li *ngIf=\\\"form.controls.password.errors?.required && form.controls.password.dirty\\\">This field is required</li>\\n\\t\\t        <li *ngIf=\\\"form.controls.password.errors?.minlength && form.controls.password.dirty || form.controls.password.errors?.maxlength && form.controls.password.dirty \\\">Password must be at least 8 characters but no more than 35</li>\\n\\t\\t        <li *ngIf=\\\"form.controls.password.errors?.validatePassword && form.controls.password.dirty\\\">Password must have 1 uppercase character, 1 lowercase character, 1 special character and 1 number</li>\\n\\t\\t      </ul>\\n\\t\\t    <!-- </div> -->\\n\\t\\t  </div>\\n\\n\\t\\t  <!-- Confirm Password Input -->\\n\\t\\t  <div class=\\\"form-group\\\">\\n\\t\\t    <label for=\\\"confirm\\\">Confirm Password</label>\\n\\t\\t    <!-- <div [ngClass]=\\\"{'has-danger': (form.controls.confirm.errors && form.controls.confirm.dirty) || (form.errors?.matchingPasswords && form.controls.confirm.dirty), 'has-success': !form.controls.confirm.errors && !form.errors?.matchingPasswords}\\\"> -->\\n\\t\\t      <input type=\\\"password\\\" name=\\\"confirm\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\" placeholder=\\\"*Confirm Password\\\" formControlName=\\\"confirm\\\" \\n\\t\\t      [ngClass]=\\\"{'is-invalid': (form.controls.confirm.errors && form.controls.confirm.dirty) || (form.errors?.matchingPasswords && form.controls.confirm.dirty), 'is-valid': !form.controls.confirm.errors && !form.errors?.matchingPasswords}\\\"\\n\\t\\t      />\\n\\t\\t      <!-- Validation -->\\n\\t\\t      <ul class=\\\"help-block\\\"\\n\\t\\t      [ngClass]=\\\"{'invalid-feedback': (form.controls.confirm.errors && form.controls.confirm.dirty) || (form.errors?.matchingPasswords && form.controls.confirm.dirty), 'valid-feedback': !form.controls.confirm.errors && !form.errors?.matchingPasswords}\\\"\\n\\t\\t      >\\n\\t\\t        <li *ngIf=\\\"form.controls.confirm.errors?.required && form.controls.confirm.dirty\\\">This field is required</li>\\n\\t\\t        <li *ngIf=\\\"form.errors?.matchingPasswords && form.controls.confirm.dirty\\\">Password do not match</li>\\n\\t\\t      </ul>\\n\\t\\t    <!-- </div> -->\\n\\t\\t  </div>\\n\\n\\t\\t  <!-- Submit Input -->\\n\\t\\t  <input [disabled]=\\\"!form.valid || processing || !emailValid || !usernameValid\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\" value=\\\"Submit\\\" />\\n\\n\\t\\t</form>\\n\\t\\t<!-- Registration Form /-->\\n\\t</div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router'; \n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  form: FormGroup;\n\n  constructor(\n                private authService: AuthService,\n                private formBuilder: FormBuilder,\n                private router: Router\n             ){ \n    this.createForm()\n  }\n\n  createForm(){\n    this.form = this.formBuilder.group({\n      // Field validators, this will update the form.controls.[control name].errors/valid in the HTML\n      email: ['', Validators.compose([\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(30),\n        this.validateEmail\n      ])],\n      password: ['', Validators.compose([\n        Validators.required,\n        Validators.minLength(8),\n        Validators.maxLength(35),\n        this.validatePassword\n      ])],\n      confirm: ['', Validators.required]\n    }, \n    //Form validator, this will update the form.valid/form.errors in the HTML\n    { \n      validator: this.matchingPasswords('password', 'confirm') \n    })\n  }  \n\n  ngOnInit() {\n  }\n\n  // Validators\n  validateEmail(controls){\n    const regExp = new RegExp(\n      /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/\n    );\n\n    if(regExp.test(controls.value)){\n      return null;\n    }else{\n      return { 'validateEmail': true }\n    }\n\n  }\n  validatePassword(controls){\n    const regExp = new RegExp(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,35})/\n    );\n\n    if(regExp.test(controls.value)){\n      return null;\n    }else{\n      return { 'validatePassword': true }\n    }\n\n  }\n  matchingPasswords(password, confirm){\n    return(group:FormGroup) => {\n      if(group.controls[password].value === group.controls[confirm].value){\n        return null;\n      }else{\n        return { 'matchingPasswords': true }\n      }\n    }\n  } \n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor() { }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}